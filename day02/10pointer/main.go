package main

import "fmt"

// Go语言中的指针
/*
区别于C/C++中的指针，Go语言中的指针不能进行偏移和运算，是安全指针。我们只需要记住两个符号：&（取地址）和*（根据地址取值）。
要搞明白Go语言中的指针需要先知道3个概念：指针地址、指针类型和指针取值。
*/

func main() {

	/*
			每个变量在运行时都拥有一个地址，这个地址代表变量在内存中的位置。Go语言中使用&字符放在变量前面对变量进行“取地址”操作。
			Go语言中的值类型（int、float、bool、string、array、struct）都有对应的指针类型，如：*int、*int64、*string等。
			取变量指针的语法如下：
				ptr := &v    // v的类型为T
			其中：
				v:代表被取地址的变量，类型为T
				ptr:用于接收地址的变量，ptr的类型就为*T，称做T的指针类型。*代表指针。

		在对普通变量使用&操作符取地址后会获得这个变量的指针，然后可以对指针使用*操作，也就是指针取值。
	*/
	a := 10
	b := &a
	fmt.Printf("a:%d &a:%p \n", a, &a) // a:10 	&a:0xc000016078
	fmt.Printf("b:%p *b:%d \n", b, *b) // b:0xc000016078 	*b:10
	fmt.Printf("%T \n", b)             // *int
	fmt.Printf("%p \n", &b)            // 0xc00000e028

	/*
		总结： 取地址操作符 & 和取值操作符 * 是一对互补操作符，&取出地址，*根据地址取出地址指向的值。
		变量、指针地址、指针变量、取地址、取值的相互关系和特性如下：
			对变量进行取地址（&）操作，可以获得这个变量的指针变量。
			指针变量的值是指针地址。
			对指针变量进行取值（*）操作，可以获得指针变量指向的原变量的值。
	*/

	m := 123
	modify1(m)
	fmt.Println(m) // 123
	modify2(&m)
	fmt.Println(m) // 100
}

func modify1(n int) {
	n = 100
}

func modify2(n *int) {
	*n = 100
}
