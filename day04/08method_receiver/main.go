package main

import "fmt"

// 方法和接收者

/*
Go语言中的方法（Method）是一种作用于特定类型变量的函数。这种特定类型变量叫做接收者（Receiver）。
接收者的概念就类似于其他语言中的this或者 self。

方法的定义格式如下：
	func (接收者变量 接收者类型) 方法名(参数列表) (返回参数) {
		函数体
	}
其中，
	接收者变量：接收者中的参数变量名在命名时，官方建议使用接收者类型名称首字母的小写，而不是self、this之类的命名。
例如，Person类型的接收者变量应该命名为 p，Connector类型的接收者变量应该命名为c等。
	接收者类型：接收者类型和参数类似，可以是指针类型和非指针类型。
	方法名、参数列表、返回参数：具体格式与函数定义相同。
 */

/*
方法是作用于特定类型的函数
方法与函数的区别是，函数不属于任何类型，方法属于特定的类型。

接受者表示的是调用该方法的具体类型变量，多用类型名的首字母小写表示
*/

/*
标识符：变量名函数名类型名方法名
Go语言中如果标识符首字母是大写的，就表示对外部包可见（暴露的，公有的）
 */

type dog struct {
	name string
	age int8
}

// 构造函数
func newDog(name string, age int8) dog {
	return dog{
		name: name,
		age: age,
	}
}

// 值类型的接收者
/*
指针类型的接收者由一个结构体的指针组成，由于指针的特性，调用方法时修改接收者指针的任意成员变量，在方法结束后，修改都是有效的。
这种方式就十分接近于其他语言中面向对象中的this或者self。
 */
func (d dog) wangwang()  {
	fmt.Printf("%s:汪汪汪\n", d.name)
	d.age = 2
}

// 指针类型的接收者
/*
当方法作用于值类型接收者时，Go语言会在代码运行时将接收者的值复制一份。在值类型接收者的方法中可以获取接收者的成员值，
但修改操作只是针对副本，无法修改接收者变量本身。
 */
func (d *dog) eat()  {
	fmt.Printf("%s:吃东西\n", d.name)
	d.age = 5
}

/*
什么时候应该使用指针类型接收者
	需要修改接收者中的值
	接收者是拷贝代价比较大的大对象
	保证一致性，如果有某个方法使用了指针接收者，那么其他的方法也应该使用指针接收者。
 */

func main()  {
	d1 := newDog("小明", 4)
	fmt.Println(d1.age)

	d1.wangwang()
	fmt.Println(d1.age)

	d1.eat()
	fmt.Println(d1.age)
}
